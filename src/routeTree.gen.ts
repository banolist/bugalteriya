/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AppImport } from './routes/_app'
import { Route as IndexImport } from './routes/index'
import { Route as AppAppIndexImport } from './routes/_app.app/index'
import { Route as AppAppUsersImport } from './routes/_app.app/users'
import { Route as AppAppTransactionsImport } from './routes/_app.app/transactions'
import { Route as AppAppSalaryImport } from './routes/_app.app/salary'
import { Route as AppAppProductsImport } from './routes/_app.app/products'
import { Route as AppAppEmployeeImport } from './routes/_app.app/employee'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppAppIndexRoute = AppAppIndexImport.update({
  id: '/app/',
  path: '/app/',
  getParentRoute: () => AppRoute,
} as any)

const AppAppUsersRoute = AppAppUsersImport.update({
  id: '/app/users',
  path: '/app/users',
  getParentRoute: () => AppRoute,
} as any)

const AppAppTransactionsRoute = AppAppTransactionsImport.update({
  id: '/app/transactions',
  path: '/app/transactions',
  getParentRoute: () => AppRoute,
} as any)

const AppAppSalaryRoute = AppAppSalaryImport.update({
  id: '/app/salary',
  path: '/app/salary',
  getParentRoute: () => AppRoute,
} as any)

const AppAppProductsRoute = AppAppProductsImport.update({
  id: '/app/products',
  path: '/app/products',
  getParentRoute: () => AppRoute,
} as any)

const AppAppEmployeeRoute = AppAppEmployeeImport.update({
  id: '/app/employee',
  path: '/app/employee',
  getParentRoute: () => AppRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_app/app/employee': {
      id: '/_app/app/employee'
      path: '/app/employee'
      fullPath: '/app/employee'
      preLoaderRoute: typeof AppAppEmployeeImport
      parentRoute: typeof AppImport
    }
    '/_app/app/products': {
      id: '/_app/app/products'
      path: '/app/products'
      fullPath: '/app/products'
      preLoaderRoute: typeof AppAppProductsImport
      parentRoute: typeof AppImport
    }
    '/_app/app/salary': {
      id: '/_app/app/salary'
      path: '/app/salary'
      fullPath: '/app/salary'
      preLoaderRoute: typeof AppAppSalaryImport
      parentRoute: typeof AppImport
    }
    '/_app/app/transactions': {
      id: '/_app/app/transactions'
      path: '/app/transactions'
      fullPath: '/app/transactions'
      preLoaderRoute: typeof AppAppTransactionsImport
      parentRoute: typeof AppImport
    }
    '/_app/app/users': {
      id: '/_app/app/users'
      path: '/app/users'
      fullPath: '/app/users'
      preLoaderRoute: typeof AppAppUsersImport
      parentRoute: typeof AppImport
    }
    '/_app/app/': {
      id: '/_app/app/'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppAppIndexImport
      parentRoute: typeof AppImport
    }
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppAppEmployeeRoute: typeof AppAppEmployeeRoute
  AppAppProductsRoute: typeof AppAppProductsRoute
  AppAppSalaryRoute: typeof AppAppSalaryRoute
  AppAppTransactionsRoute: typeof AppAppTransactionsRoute
  AppAppUsersRoute: typeof AppAppUsersRoute
  AppAppIndexRoute: typeof AppAppIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppAppEmployeeRoute: AppAppEmployeeRoute,
  AppAppProductsRoute: AppAppProductsRoute,
  AppAppSalaryRoute: AppAppSalaryRoute,
  AppAppTransactionsRoute: AppAppTransactionsRoute,
  AppAppUsersRoute: AppAppUsersRoute,
  AppAppIndexRoute: AppAppIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/app/employee': typeof AppAppEmployeeRoute
  '/app/products': typeof AppAppProductsRoute
  '/app/salary': typeof AppAppSalaryRoute
  '/app/transactions': typeof AppAppTransactionsRoute
  '/app/users': typeof AppAppUsersRoute
  '/app': typeof AppAppIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/app/employee': typeof AppAppEmployeeRoute
  '/app/products': typeof AppAppProductsRoute
  '/app/salary': typeof AppAppSalaryRoute
  '/app/transactions': typeof AppAppTransactionsRoute
  '/app/users': typeof AppAppUsersRoute
  '/app': typeof AppAppIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_app': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/_app/app/employee': typeof AppAppEmployeeRoute
  '/_app/app/products': typeof AppAppProductsRoute
  '/_app/app/salary': typeof AppAppSalaryRoute
  '/_app/app/transactions': typeof AppAppTransactionsRoute
  '/_app/app/users': typeof AppAppUsersRoute
  '/_app/app/': typeof AppAppIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/app/employee'
    | '/app/products'
    | '/app/salary'
    | '/app/transactions'
    | '/app/users'
    | '/app'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/app/employee'
    | '/app/products'
    | '/app/salary'
    | '/app/transactions'
    | '/app/users'
    | '/app'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/login'
    | '/_app/app/employee'
    | '/_app/app/products'
    | '/_app/app/salary'
    | '/_app/app/transactions'
    | '/_app/app/users'
    | '/_app/app/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_app",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/app/employee",
        "/_app/app/products",
        "/_app/app/salary",
        "/_app/app/transactions",
        "/_app/app/users",
        "/_app/app/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_app/app/employee": {
      "filePath": "_app.app/employee.tsx",
      "parent": "/_app"
    },
    "/_app/app/products": {
      "filePath": "_app.app/products.tsx",
      "parent": "/_app"
    },
    "/_app/app/salary": {
      "filePath": "_app.app/salary.tsx",
      "parent": "/_app"
    },
    "/_app/app/transactions": {
      "filePath": "_app.app/transactions.tsx",
      "parent": "/_app"
    },
    "/_app/app/users": {
      "filePath": "_app.app/users.tsx",
      "parent": "/_app"
    },
    "/_app/app/": {
      "filePath": "_app.app/index.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
